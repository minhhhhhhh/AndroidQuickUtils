{"body":"## QuickUtils\r\n\r\n\r\n<!--\r\n<div style=\"float: left\"><img src=\"http://cesarferreira.com/wp-content/uploads/2012/07/dribbble.png\"  \r\nstyle=\"width:200px\" /></div>  \r\n-->\r\n<div style=\"float: left\"><img src=\"https://dl.dropbox.com/u/86831/cesarferreira/nexus_header2.jpg\" /></div>  \r\nThis repository offers a set of random useful classes to deal with repetitive tasks in the Android Framework.\r\nIntended to help you getting your Android applications off the ground quickly, by offering ready-to-use components and utility classes that wrap a lot of the boilerplate that's involved when writing Android apps.\r\n\r\n\r\n## Changelog\r\n\r\n### 0.3 <sub><sup>`2012/08/26`</sup></sub>\r\n- Added Javadocs to the project\r\n- All the `log` methods now can handle `Throwable` objects, thanks @joelfernandes for the suggestion\r\n- Added `copyFile(fromFile, toFile)` to the `sdcard` category\r\n- Added `copyFile(fromFileInputStream, toFileOutputStream)` to the `sdcard` category\r\n- Added `getSDCardPath` to the `sdcard`category\r\n- Added `web` category \r\n- `hasInternetConnection()` moved from `misc` to `web` category\r\n- Added `HTTPGetRequest()` to the `web`category\r\n- Added `degreesToRadians`, `radiansTdoDegrees`, `acos`, `asin`, `atan`, `atan2`, `tan`, `max`, `min`, `abs`, `logarithm`, `exponencial` and `isEven` to the `math` category\r\n- `getCurrentTimeInSeconds()` and `getCurrentTimeInMilliseconds()` moved to the `date` category\r\n- Added`getDayAsString(int day, String format)` and `getDayAsDate(int day)` to the `date` category\r\n\r\n\r\n### 0.2 <sub><sup>`2012/08/02`</sup></sub>\r\n- Checks if the app has connectivity to the Internet\r\n- `getCurrentTime()` is now divided into `getCurrentTimeInSeconds()` and `getCurrentTimeInMilliseconds()`\r\n- public static long getCurrentTimeInSeconds()\r\n- `sleep` method now accepts milliseconds instead of seconds\r\n- `log` now has a warning method\r\n- Updated max SDK version to 4.0.3\r\n- Added `math` category\r\n- Get a random number between a given range\r\n- Check if a number is odd\r\n\r\n### 0.1 <sub><sup>`2012/07/10`</sup></sub>\r\n- Added `log` category\r\n- Added error log method\r\n- Added information log method\r\n- Added verbose log method\r\n- Added debug log method\r\n- Added `sdcard` category\r\n- Added isSDCardAvailable method\r\n- Added isSDCardWritable method\r\n- Added `misc` category\r\n- Added vibrate method\r\n- Added sleep method\r\n- Added toast method with custom lenght time\r\n- Added get current time in miliseconds method\r\n\r\n\r\n\r\n-----\r\n\r\n\r\n\r\n\r\n## Usage\r\nReally simple usage, you just need to specify the category and the method you want to use.\r\n\r\n```java\r\nQuickUtils.__category__.__method__\r\n```\r\n-------------------\r\n\r\n## LOG <sub><sup>`category`</sup></sub>\r\n\r\nWith this methods you don't need to set the TAG variable in every class of your project and you can disable the logs everywhere without deleting/commenting the log lines by setting the debug mode to PRODUCTION (explained in the previous section).\r\n\r\n```java\r\nQuickUtils.log.__method__\r\n```\r\n\r\n\r\n### Error Log \r\n\r\n```java\r\nQuickUtils.log.e(\"error description\");\r\n```\r\n\r\n```java\r\nQuickUtils.log.e(\"error description\", throwable);\r\n```\r\n\r\n### Verbose Log \r\n\r\n```java\r\nQuickUtils.log.v(\"verbose description\");\r\n```\r\n\r\n```java\r\nQuickUtils.log.v(\"verbose description\", throwable);\r\n```\r\n\r\n### Information Log \r\n\r\n```java\r\nQuickUtils.log.i(\"information description\");\r\n```\r\n```java\r\nQuickUtils.log.i(\"information description\", throwable);\r\n```\r\n\r\n### Warning Log \r\n\r\n```java\r\nQuickUtils.log.w(\"warning description\");\r\n```\r\n```java\r\nQuickUtils.log.w(\"warning description\", throwable);\r\n```\r\n\r\n### Debug Log \r\n\r\n```java\r\nQuickUtils.log.d(\"debug description\");\r\n```\r\n\r\n```java\r\nQuickUtils.log.d(\"debug description\", throwable);\r\n```\r\n\r\n------------\r\n\r\n## DATE <sub><sup>`category`</sup></sub>\r\n\r\nDate Utils\r\n\r\n```java\r\nQuickUtils.date.__method__\r\n```\r\n\r\n### Get the current time in milliseconds `long`\r\n\r\n```java\r\nQuickUtils.misc.getCurrentTimeInMiliseconds();\r\n```\r\n\r\n### Get the current time in seconds `long`\r\n\r\n```java\r\nQuickUtils.misc.getCurrentTimeInSeconds();\r\n```\r\n\r\n### Gets a date with a desired format as a String `String`\r\nThey \"day\" parameter can be provided as: \r\n- `QuickUtils.date.YESTERDAY`, \r\n- `QuickUtils.date.TODAY` or \r\n- `QuickUtils.date.TOMORROW`\r\n\r\nThe format can be provided as e.g. \"yyyy-MM-dd HH:mm:ss\"\r\n\r\n```java\r\nQuickUtils.misc.getDayAsString(int day, String format);\r\n```\r\n\r\n### Gets the desired day as a Date `Date`\r\nThey \"day\" parameter can be provided as:\r\n- `QuickUtils.date.YESTERDAY`, \r\n- `QuickUtils.date.TODAY` or \r\n- `QuickUtils.date.TOMORROW`\r\n\r\n```java\r\nQuickUtils.misc.getDayAsDate(int day);\r\n```\r\n\r\n\r\n------------\r\n\r\n## MISC <sub><sup>`category`</sup></sub>\r\n\r\nMisc utils\r\n\r\n\r\n```java\r\nQuickUtils.misc.__method__\r\n```\r\n\r\n### Toast method with short duration `void`\r\n\r\n```java\r\nQuickUtils.misc.toast(context, \"This is a short toast\");\r\n```\r\n\r\n### Toast with non specified duration `void`\r\nEither `Toast.LENGTH_SHORT` or `Toast.LENGTH_LONG`\r\n\r\n```java\r\nQuickUtils.misc.toast(context, \"This is a short toast\", Toast.LENGTH_LONG);\r\n```\r\n\r\n### Sleep `void`\r\nCauses the thread which sent this message to sleep for the given interval of time (given in milliseconds). The precision is not guaranteed - the Thread may sleep more or less than requested.\r\n\r\n```java\r\nQuickUtils.misc.sleep(durationInMilliseconds);\r\n```\r\n------------\r\n\r\n## MATH <sub><sup>`category`</sup></sub>\r\n\r\nMath Utils.\r\n\r\n```java\r\nQuickUtils.math.__method__\r\n```\r\n\r\n### Returns a random number `int`\r\nA random int between MIN inclusive and MAX exclusive.\r\n\r\n```java\r\nQuickUtils.math.getRandomNumber(int min, int max);\r\n```\r\n\r\n### Check if a number is Odd `boolean`\r\nTrue if the num is odd and false if it's even\r\n\r\n```java\r\nQuickUtils.math.isOdd(int num);\r\n```\r\n\r\n### Check if a number is Even `boolean`\r\nTrue if the num is even and false if it's odd\r\n\r\n```java\r\nQuickUtils.math.isEven(int num);\r\n```\r\n\r\n### Degrees to radians `float`\r\nReturns the converted value\r\n\r\n```java\r\nQuickUtils.math.degreesToRadians(float degrees);\r\n```\r\n\r\n### Radians to degrees `float`\r\nReturns the converted value\r\n\r\n```java\r\nQuickUtils.math.radiansTdoDegrees(float radians);\r\n```\r\n\r\n### Arc cosine `float`\r\nReturns the closest double approximation of the arc cosine of the argument within the range [0..pi]. The returned result is within 1 ulp (unit in the last place) of the real result.\r\n\r\n```java\r\nQuickUtils.math.acos(float value);\r\n```\r\n\r\n### Arc sine `float`\r\nReturns the closest double approximation of the arc sine of the argument within the range [-pi/2..pi/2]. The returned result is within 1 ulp (unit in the last place) of the real result.\r\n\r\n```java\r\nQuickUtils.math.asin(float value);\r\n```\r\n\r\n### Arc tangent `float`\r\nReturns the closest double approximation of the arc tangent of the argument within the range [-pi/2..pi/2]. The returned result is within 1 ulp (unit in the last place) of the real result.\r\n\r\n```java\r\nQuickUtils.math.atan(float value);\r\n```\r\n### Arc tangent of y/x within the range [-pi..pi] `float`\r\nReturns the closest double approximation of the arc tangent of y/x within the range [-pi..pi]. This is the angle of the polar representation of the rectangular coordinates (x,y). The returned result is within 2 ulps (units in the last place) of the real result.\r\n\r\n```java\r\nQuickUtils.math.atan2(float value);\r\n```\r\n\r\n### Tangent of an angle `float`\r\nReturns the tangent\r\n\r\n```java\r\nQuickUtils.math.tan(float angle);\r\n```\r\n### Absolute value `float`\r\nReturns the absolute value\r\n\r\n```java\r\nQuickUtils.math.abs(float v);\r\n```\r\n\r\n### Number's logarithm `float`\r\nReturns the closest double approximation of the natural logarithm of the argument. The returned result is within 1 ulp (unit in the last place) of the real result.\r\n\r\n```java\r\nQuickUtils.math.logarithm(float number);\r\n```\r\n### Number's Exponencial `float`\r\nReturns the closest double approximation of the natural logarithm of the argument. The returned result is within 1  ulp (unit in the last place) of the real result.\r\n\r\n```java\r\nQuickUtils.math.exponencial(float number);\r\n```\r\n\r\n### Gets the higher number `float` `int`\r\nthe higher number between a and b\r\n\r\n```java\r\nQuickUtils.math.max(float a, float b);\r\n```\r\n\r\n```java\r\nQuickUtils.math.max(int a, int b);\r\n```\r\n\r\n### Gets the lower number `float` `int`\r\nthe lower number between a and b\r\n\r\n```java\r\nQuickUtils.math.min(float a, float b);\r\n```\r\n\r\n```java\r\nQuickUtils.math.min(int a, int b);\r\n```\r\n\r\n------------\r\n\r\n## WEB <sub><sup>`category`</sup></sub>\r\n\r\nWeb Utils.\r\n\r\n```java\r\nQuickUtils.web.__method__\r\n```\r\n\r\n\r\n### Checks if the app has connectivity to the Internet `boolean`\r\nTrue if has connection to the Internet and false if it doesn't.\r\n\r\n```java\r\nQuickUtils.misc.hasInternetConnection(Context context);\r\n```\r\n\r\n### Does a GET request to a given url `String`\r\nNote: Please use this method on an AsyncTask in order not to freeze the application unnecessarely  (http://developer.android.com/guide/practices/responsiveness.html)\r\n\r\n```java\r\nQuickUtils.misc.HTTPGetRequest(String url);\r\n```\r\n\r\n------------\r\n\r\n## SDCARD <sub><sup>`category`</sup></sub>\r\n\r\nSDCard Utils.\r\n\r\n```java\r\nQuickUtils.sdcard.__method__\r\n```\r\n\r\n### Check if the SD Card is Available `boolean`\r\nTrue if the sd card is available and false if it is not\r\n\r\n```java\r\nQuickUtils.sdcard.isSDCardAvailable();\r\n```\r\n\r\n### Check if the SD Card is Writable `boolean`\r\nTrue if the sd card is writable and false if it is not\r\n\r\n```java\r\nQuickUtils.sdcard.isSDCardWritable();\r\n```\r\n\r\n### Get the path to the SDCard `String`\r\nReturn the complete path to the SDCard\r\n\r\n```java\r\nQuickUtils.sdcard.getSDCardPath();\r\n```\r\n\r\n\r\n### Copy a file from a place to another `void`\r\nCreates the specified `toFile` as a byte for byte copy of  the `fromFile`. If `toFile` already exists, then it will be replaced with a copy of `fromFile`. The name and path of`toFile` will be that of `toFile`.\r\n\r\nNote: `fromFile` and `toFile` will be closed by this function.\r\n\r\n\r\nAs Files\r\n\r\n```java\r\nQuickUtils.sdcard.copyFile(fromFile, toFile);\r\n```\r\n\r\nor with Input and Output Streams:\r\n\r\n```java\r\nQuickUtils.sdcard.copyFile(fromFileInputStream, toFileOutputStream);\r\n```\r\n\r\n\r\n## Example\r\n\r\n\r\n```java\r\n@Override\r\n public void onCreate(Bundle savedInstanceState) {\r\n\t\tsuper.onCreate(savedInstanceState);\r\n\t\tsetContentView(R.layout.activity_main);\r\n\r\n\t\t// SET ENVIRONMENT\r\n\t\tQuickUtils.setDebugMode(QuickUtils.DEVELOPER_MODE); // can be omited\r\n\r\n\t\t// SET THE DEBUG TAG\r\n\t\tQuickUtils.setTAG(\"SAMPLE_APP\");\r\n\r\n\t\tQuickUtils.log.v(QuickUtils.math.logarithm(number) + \"\");\r\n\r\n\t\ttry {\r\n\t\t\tQuickUtils.log.w(\"This is dangerous code\");\r\n\r\n\t\t\t// do DANGEROUS STUFF\r\n\t\t\t// ...\r\n\t\t\t// ...\r\n\r\n\t\t\tQuickUtils.misc.toast(this, \"The result of your dangerous calculations is: \" + number);\r\n\r\n\t\t} catch (Exception exception) {\r\n\t\t\tQuickUtils.log.e(\"Exception thrown\", exception);\r\n\t\t}\r\n\r\n\t\t// Check if you can write on your sdcard\r\n\t\tif (QuickUtils.sdcard.isSDCardAvailable() && QuickUtils.sdcard.isSDCardWritable()) {\r\n\r\n\t\t\t// you can write safely on your sdcard\r\n\t\t\r\n\r\n\t\t\tFile path = new File(QuickUtils.sdcard.getSDCardPath() + \"/appName/\");\r\n\r\n\t\t\tFile from = new File(path, \"from.txt\");\r\n\t\t\tFile to = new File(path, \"to.txt\");\r\n\r\n\t\t\ttry {\r\n\t\t\t\tQuickUtils.sdcard.copyFile(from, to);\r\n\t\t\t\tQuickUtils.log.i(\"Written to the sdcard\");\r\n\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tQuickUtils.log.e(\"IOException\", e);\r\n\t\t\t}\r\n\t\t}\r\n\r\n```\r\n\r\n## Downloads\r\nAll the versions can be found [here](https://github.com/cesarferreira/AndroidQuickUtils/tags)\r\n\r\n\r\n## Instalation\r\nAs simple as going to your project's properties and include the `QuickUtils.jar` library or add the QuickUtils project as a library as shown below.\r\n\r\n ![](https://dl.dropbox.com/u/86831/cesarferreira/goanswer.png)\r\n\r\n\r\n## Setting up the environment\r\nSet the default TAG for logcat debug purposes\r\n\r\n```java\r\nQuickUtils.setTAG(\"DESIRED_TAG\");\r\n```\r\n\r\n\r\n### Debug mode\r\n\r\nTo enable the log outputs (This is the default behavior of the library so you don't need to set this up).\r\n\r\n```java\r\nQuickUtils.setDebugMode(QuickUtils.DEVELOPER_MODE);\r\n```\r\n\r\nWhen the application is ready to go and you want to disable the log outputs.\r\n\r\n```java\r\nQuickUtils.setDebugMode(QuickUtils.PRODUCTION_MODE);\r\n```\r\n\r\nAndroidManifest.xml\r\n-------------------\r\n\r\nIf you intend to use the vibration util don't forget to add the vibration permission, if you haven't already, in your `<manifest>`:\r\n\r\n```xml\r\n<uses-permission android:name=\"android.permission.VIBRATE\" />   \r\n```\r\n\r\nIf you intend to use the `hasConnectivity` method don't forget to add the network state access permission, if you haven't already, in your `<manifest>`:\r\n\r\n```xml\r\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n```\r\n\r\nIf you intend to use the `HTTPGetRequest` method, if you haven't already, in your `<manifest>`:\r\n\r\n```xml\r\n<uses-permission android:name=\"android.permission.INTERNET\" />\r\n```\r\n\r\n\r\n## Contributing\r\n\r\nWant to contribute? Great! \r\n\r\n1. Fork it.\r\n2. Create a branch (`git checkout -b my_branch`)\r\n3. Commit your changes (`git commit -am \"Added changes\"`)\r\n4. Push to the branch (`git push origin my_branch`)\r\n5. Create an [Issue](https://github.com/cesarferreira/AndroidQuickUtils/issues) with a link to your branch\r\n6. Enjoy a refreshing Diet Coke and wait\r\n\r\n\r\n## License\r\nApache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0.html)\r\n\r\n## Authors\r\n * César Ferreira (cesar.manuel.ferreira@gmail.com)\r\n\r\n\r\n","google":"UA-18248446-3","tagline":"My own set of utils for Android applications","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Quickutils"}