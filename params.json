{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"My own set of utils for Android applications","name":"Quickutils","body":"## QuickUtils\r\n\r\n\r\n<!--\r\n<div style=\"float: left\"><img src=\"http://cesarferreira.com/wp-content/uploads/2012/07/dribbble.png\"  \r\nstyle=\"width:200px\" /></div>  \r\n-->\r\n<div style=\"float: left\"><img src=\"https://dl.dropbox.com/u/86831/cesarferreira/nexus_header2.jpg\" /></div>  \r\nThis repository offers a set of random useful classes to deal with repetitive tasks in the Android Framework.\r\nIntended to help you getting your Android applications off the ground quickly, by offering ready-to-use components and utility classes that wrap a lot of the boilerplate that's involved when writing Android apps.\r\n\r\n\r\n## Changelog\r\n\r\n### 0.2 <sub><sup>`2012/08/02`</sup></sub>\r\n- Checks if the app has connectivity to the Internet\r\n- `getCurrentTime()` is now divided into `getCurrentTimeInSeconds()` and `getCurrentTimeInMilliseconds()`\r\n- public static long getCurrentTimeInSeconds()\r\n- `sleep` method now accepts milliseconds instead of seconds\r\n- `log` now has a warning method\r\n- Updated SDK version to 4.0.3\r\n- Added `math` category\r\n- Get a random number between a given range\r\n- Check if a number is odd\r\n\r\n### 0.1 <sub><sup>`2012/07/10`</sup></sub>\r\n- Added `log` category\r\n- Added error log method\r\n- Added information log method\r\n- Added verbose log method\r\n- Added debug log method\r\n- Added `sdcard` category\r\n- Added isSDCardAvailable method\r\n- Added isSDCardWritable method\r\n- Added `misc` category\r\n- Added vibrate method\r\n- Added sleep method\r\n- Added toast method with custom lenght time\r\n- Added get current time in miliseconds method\r\n\r\n\r\n\r\n-----\r\n\r\n\r\n\r\n\r\n## Usage\r\nReally simple usage, you just need to specify the category and the method you want to use.\r\n\r\n```java\r\nQuickUtils.__category__.__method__\r\n```\r\n-------------------\r\n\r\n## LOG <sub><sup>`category`</sup></sub>\r\n\r\nWith this methods you don't need to set the TAG variable in every class of your project and you can disable the logs everywhere without deleting/commenting the log lines by setting the debug mode to PRODUCTION (explained in the previous section).\r\n\r\n```java\r\nQuickUtils.log.__method__\r\n```\r\n\r\n\r\n### Error Log \r\n\r\n```java\r\nQuickUtils.log.e(\"error description\");\r\n```\r\n\r\n### Verbose Log \r\n\r\n```java\r\nQuickUtils.log.v(\"verbose description\");\r\n```\r\n\r\n### Information Log \r\n\r\n```java\r\nQuickUtils.log.i(\"information description\");\r\n```\r\n\r\n### Warning Log \r\n\r\n```java\r\nQuickUtils.log.w(\"warning description\");\r\n```\r\n\r\n### Debug Log \r\n\r\n```java\r\nQuickUtils.log.d(\"debug description\");\r\n```\r\n\r\n### Debug Log `throwable`\r\n\r\n```java\r\nQuickUtils.log.d(\"debug description\", Throwable t);\r\n```\r\n\r\n------------\r\n\r\n## MISC <sub><sup>`category`</sup></sub>\r\n\r\nWith this methods you don't need to set....\r\n\r\n```java\r\nQuickUtils.misc.__method__\r\n```\r\n\r\n\r\n### Checks if the app has connectivity to the Internet `boolean`\r\nTrue if has connection to the Internet and false if it doesn't.\r\n\r\n```java\r\nQuickUtils.misc.hasInternetConnection(Context context);\r\n```\r\n\r\n\r\n### Get the current time in milliseconds `long`\r\n\r\n```java\r\nQuickUtils.misc.getCurrentTimeInMiliseconds();\r\n```\r\n\r\n### Get the current time in seconds `long`\r\n\r\n```java\r\nQuickUtils.misc.getCurrentTimeInSeconds();\r\n```\r\n\r\n### Sleep `void`\r\nCauses the thread which sent this message to sleep for the given interval of time (given in milliseconds). The precision is not guaranteed - the Thread may sleep more or less than requested.\r\n\r\n\r\n```java\r\nQuickUtils.misc.sleep(durationInMilliseconds);\r\n```\r\n\r\n### Toast method with short duration `void`\r\n\r\n```java\r\nQuickUtils.misc.toast(context, \"This is a short toast\");\r\n```\r\n\r\n### Toast with non specified duration `void`\r\nEither `Toast.LENGTH_SHORT` or `Toast.LENGTH_LONG`\r\n\r\n```java\r\nQuickUtils.misc.toast(context, \"This is a short toast\", Toast.LENGTH_LONG);\r\n```\r\n------------\r\n\r\n## MATH <sub><sup>`category`</sup></sub>\r\n\r\nMath Utils.\r\n\r\n```java\r\nQuickUtils.math.__method__\r\n```\r\n\r\n### Returns a random number between MIN inclusive and MAX exclusive. `int`\r\nA random int between MIN inclusive and MAX exclusive.\r\n\r\n```java\r\nQuickUtils.sdcard.getRandomNumber(int min, int max);\r\n```\r\n\r\n### Check if a number is Odd. `boolean`\r\nTrue if the num is odd and false if it's even\r\n\r\n```java\r\nQuickUtils.sdcard.isOdd(int num);\r\n```\r\n\r\n\r\n\r\n------------\r\n\r\n## SDCARD <sub><sup>`category`</sup></sub>\r\n\r\nSDCard Utils.\r\n\r\n```java\r\nQuickUtils.sdcard.__method__\r\n```\r\n\r\n### Check if the SD Card is Available `boolean`\r\nTrue if the sd card is available and false if it is not\r\n\r\n```java\r\nQuickUtils.sdcard.isSDCardAvailable();\r\n```\r\n\r\n### Check if the SD Card is Writable `boolean`\r\nTrue if the sd card is writable and false if it is not\r\n\r\n```java\r\nQuickUtils.sdcard.isSDCardWritable();\r\n```\r\n\r\n## Example\r\n\r\n\r\n```java\r\n@Override\r\n public void onCreate(Bundle savedInstanceState) {\r\n\t\tsuper.onCreate(savedInstanceState);\r\n\t\tsetContentView(R.layout.activity_main);\r\n\r\n\t\t// SET ENVIRONMENT\r\n\t\tQuickUtils.setDebugMode(QuickUtils.DEVELOPER_MODE); // can be omited\r\n\r\n\t\ttry {\r\n\t\t\tQuickUtils.log.w(\"This is dangerous code\");\r\n\r\n\t\t\t// do DANGEROUS STUFF\r\n\t\t\t// ...\r\n\t\t\t// ...\r\n\r\n\t\t\tQuickUtils.misc.toast(this,\r\n\t\t\t\t\t\"The result of your dangerous calculations is: \" + number);\r\n\r\n\t\t} catch (Exception exception) {\r\n\t\t\tQuickUtils.log.d(\"Exception thrown\", exception);\r\n\t\t}\r\n\r\n\t\t// Check if you can write on your sdcard\r\n\t\tif (QuickUtils.sdcard.isSDCardAvailable()\r\n\t\t\t\t&& QuickUtils.sdcard.isSDCardWritable()) {\r\n\r\n\t\t\t// you can write safely on your sdcard\r\n\t\t\t// ...\r\n\t\t\t// ...\r\n\t\t}\r\n\r\n\t}\r\n```\r\n\r\n## Downloads\r\nAll the versions can be found [here](https://github.com/cesarferreira/AndroidQuickUtils/tags)\r\n\r\n\r\n## Instalation\r\nAs simple as going to your project's properties and include the `QuickUtils.jar` library or add the QuickUtils project as a library as shown below.\r\n\r\n ![](https://dl.dropbox.com/u/86831/cesarferreira/goanswer.png)\r\n\r\n\r\n## Setting up the environment\r\nSet the default TAG for logcat debug purposes\r\n\r\n```java\r\nQuickUtils.setTAG(\"DESIRED_TAG\");\r\n```\r\n\r\n\r\n### Debug mode\r\n\r\nTo enable the log outputs (This is the default behavior of the library so you don't need to set this up).\r\n\r\n```java\r\nQuickUtils.setDebugMode(QuickUtils.DEVELOPER_MODE);\r\n```\r\n\r\nWhen the application is ready to go and you want to disable the log outputs.\r\n\r\n```java\r\nQuickUtils.setDebugMode(QuickUtils.PRODUCTION_MODE);\r\n```\r\n\r\nAndroidManifest.xml\r\n-------------------\r\n\r\nIf you intend to use the vibration util don't forget to add the vibration permission, if you haven't already, in your `<manifest>`:\r\n\r\n```xml\r\n<uses-permission android:name=\"android.permission.VIBRATE\" />   \r\n```\r\n\r\nIf you intend to use the `hasConnectivity` method don't forget to add the network state access permission, if you haven't already, in your `<manifest>`:\r\n\r\n```xml\r\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n```\r\n\r\n\r\nImport\r\n------\r\n```java\r\nimport com.cesar.android;\r\n```\r\n\r\n\r\n## Contributing\r\n\r\nWant to contribute? Great! \r\n\r\n1. Fork it.\r\n2. Create a branch (`git checkout -b my_branch`)\r\n3. Commit your changes (`git commit -am \"Added changes\"`)\r\n4. Push to the branch (`git push origin my_branch`)\r\n5. Create an [Issue](https://github.com/cesarferreira/AndroidQuickUtils/issues) with a link to your branch\r\n6. Enjoy a refreshing Diet Coke and wait\r\n\r\n\r\n## License\r\nApache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0.html)\r\n\r\n## Authors\r\n * CÃ©sar Ferreira (cesar.manuel.ferreira@gmail.com)\r\n","google":""}